#!/usr/bin/env python3

# ******************************************
#
#    SHARC Program Suite
#
#    Copyright (c) 2018 University of Vienna
#
#    This file is part of SHARC.
#
#    SHARC is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    SHARC is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    inside the SHARC manual.  If not, see <http://www.gnu.org/licenses/>.
#
# ******************************************

import sys
import os
import subprocess as sp
import math
from importlib import import_module
from contextlib import redirect_stdout

from constants import NUMBERS
from utils import readfile, writefile, itnmstates
from qmout import QMout
from SHARC_INTERFACE import SHARC_INTERFACE


# ======================================================================= #
# ======================================================================= #
# ======================================================================= #

# Define the global file path for the output
OUTPUT_FILE_PATH = "otool_external_all_output.txt"

# Custom print function
def setup_print():
    """Redefine the print function to mirror output to a file."""
    global original_print
    global mirrored_file
    original_print = print  # Save the original print function
    
    # Open the file in append mode
    mirrored_file = open(OUTPUT_FILE_PATH, "a")

    def custom_print(*args, **kwargs):
        """Custom print function that writes to both the console and a file."""
        # original_print(*args, **kwargs)  # Print to console
        # print(*args, file=mirrored_file, **kwargs)  # Print to file
        file_arg = kwargs.pop("file", None)
        original_print(*args, **kwargs, file=file_arg if file_arg else sys.stdout)
        if not file_arg:
            original_print(*args, **kwargs, file=mirrored_file)

    # Override the built-in print with the custom function
    globals()['print'] = custom_print

def cleanup_print():
    """Restore the original print function and close the mirrored file."""
    global print
    global mirrored_file
    print = original_print  # Restore the original print function
    mirrored_file.close()  # Close the file

# ======================================================================= #
# ======================================================================= #
# ======================================================================= #

def read_infos(ext_in):
    """Parse coordinate file provided by ORCA and convert
        it to Infos"""
    INFOS = {}
    orca_in = readfile(ext_in)
    xyzfile=orca_in[0].split()[0]    
    charge=int(orca_in[1].split()[0])
    mult=int(orca_in[2].split()[0])
    dograd=int(orca_in[4].split()[0])
    calc_type=1
    xyz=readfile(xyzfile)
    natoms=int(xyz[0])
    INFOS['natom'] = int(natoms)

    # read geometry
    geom = []
    for line in xyz[2:]:
        atype, Rx, Ry, Rz = line.split()
        atom = [atype, float(Rx), float(Ry), float(Rz)]
        geom.append(atom)
    INFOS['geom'] = geom
    INFOS["IAn"] = [ NUMBERS[atom[0]] for atom in geom ]

    # get interface and other info from original ORCA input
    jobname = ext_in.split('.')[0]
    inpfile = 'otool_external.inp'   # TODO: Hard-coded!
    if os.path.isfile(inpfile):
        inp = readfile(inpfile)
        for line in inp:
            if 'SHARC:' in line:
                s = line.split()
                key = s[1]
                arg = s[2:]
                if 'states' in key.lower():
                    INFOS['states'] = [int(i) for i in arg]
                if 'charge' in key.lower():
                    INFOS['charge'] = [int(i) for i in arg]
                if 'opt' in key.lower():
                    INFOS['opt'] = [arg[0].lower()] + [int(i) for i in arg[1:]]
                if 'interface' in key.lower():
                    INFOS['interface'] = arg[0].lower()
                if 'param' in key.lower():
                    INFOS['sigma'] = float(arg[0])
                    INFOS['alpha'] = float(arg[1])

    if not 'states' in INFOS:
        INFOS['states'] = [1]
    if not 'charge' in INFOS:
        INFOS['charge'] = [0]
    if not 'opt' in INFOS:
        INFOS['opt'] = ['min', 1]
    if not 'sigma' in INFOS:
        INFOS['sigma'] = 3.5
    if not 'alpha' in INFOS:
        INFOS['alpha'] = 0.02

    # instantiate the interface
    if not 'interface' in INFOS:
        print("Interface not given in otool_external.inp!")
        print('Could not figure out which interface to employ.')
        exit(1)
    interface_name = INFOS["interface"].upper()
    interface_name = interface_name if interface_name.split("_")[0] == "SHARC" else f"SHARC_{interface_name}"
    module = import_module(interface_name)
    interface = getattr(module, interface_name)
    derived_int: SHARC_INTERFACE = interface()
    basic_infos = {
        "NAtoms": INFOS['natom'],
        "states": INFOS['states'],
        "charge": INFOS['charge'],
        "IAn": INFOS["IAn"],
        "retain": "retain 1"
    }
    derived_int.setup_mol(basic_infos)
    derived_int.read_template()
    int_features = derived_int.get_features()
    INFOS["features"] = int_features
    INFOS["interface_name"] = derived_int.__class__.__name__

    # calculate state-related quantities
    statemap = {}
    i = 1
    for imult, istate, ims in itnmstates(INFOS['states']):
        statemap[i] = [imult, istate, ims]
        i += 1
    INFOS['statemap'] = statemap
    INFOS['nmstates'] = len(statemap)

    # process optimization request
    if INFOS['opt'][0] == 'min':
        a = INFOS['opt'][1]
        if not a in statemap:
            print('State %i not in state specs (%s)!' % (a, INFOS['states']))
            sys.exit(1)
        INFOS['opt_mode'] = 0                 # min opt with grad
    elif INFOS['opt'][0] == 'cross':
        a = INFOS['opt'][1]
        b = INFOS['opt'][2]
        INFOS['opt'][1], INFOS['opt'][2] = min(a, b), max(a, b)
        if not a in statemap or not b in statemap:
            print('States %i or %i not in state specs (%s)!' % (a, b, INFOS['states']))
            sys.exit(1)
        mult1 = statemap[a][0]
        mult2 = statemap[b][0]
        if mult1 == mult2:
            if "nacdr" in int_features:
                INFOS['opt_mode'] = 1             # CI opt with NAC
            else:
                INFOS['opt_mode'] = 2             # CI opt without NAC
        else:
            INFOS['opt_mode'] = 3               # ISC opt

    if INFOS['opt_mode'] == 0:
        involved_states = '%i' % (INFOS['opt'][1])
    else:
        involved_states = '%i %i' % (INFOS['opt'][1], INFOS['opt'][2])
    string = '''################# Input: #################
  Interface:            %s
  Number of states:     %s
  Optimization mode:    %s
  Involved state(s):    %s

  For all quantum chemistry infos, see these interface files:
''' % (derived_int.name(),
       INFOS['states'],
       ['Minimization', 'CI optimization with NACs', 'CI optimization without NACs', 'MXP optimization'][INFOS['opt_mode']],
       involved_states
       )
    # for i in INTERFACE[INFOS['interface']]['files']:
    #     string += '    - %s\n' % (i)
    string += '    - %s\n' % ('QM.log')
    string += '    - %s\n' % ('QM.err')

    print(string)
    return INFOS

# ======================================================================= #


def prepare_savedir(INFOS):
    savepath = os.path.join(os.getcwd(), 'SAVEDIR')
    if os.path.isdir(savepath):
        if os.listdir(savepath) == []:
            INFOS['step'] = 0
        else:
            INFOS['step'] = 1
    else:
        INFOS['step'] = 0
        os.mkdir(savepath)
    INFOS['savedir'] = savepath
    return INFOS

# ======================================================================= #


def write_QMin(INFOS):
    string = '%i\n\n' % (INFOS['natom'])
    for atom in INFOS['geom']:
        string += '%2s %14.9f %14.9f %14.9f\n' % tuple(atom)
    if INFOS['step'] == 0:
        string += 'init\n'
    string += 'states '
    for i in INFOS['states']:
        string += '%i ' % (i)
    string += '\n'
    string += 'charge '
    for i in INFOS['charge']:
        string += '%i ' % (i)
    string += '\n'
    string += 'unit angstrom\n'
    string += 'savedir %s\n' % (INFOS['savedir'])
    string += 'H\n'
    if 'molden' in INFOS['features']:
        string += 'molden\n'
    if INFOS['opt_mode'] == 0:
        string += 'grad %i\n' % (INFOS['opt'][1])
    elif INFOS['opt_mode'] in [1, 2, 3]:
        string += 'grad %i %i\n' % (INFOS['opt'][1], INFOS['opt'][2])
    if INFOS['opt_mode'] == 1:
        string += 'nacdr select\n%i %i\nend\n' % (INFOS['opt'][1], INFOS['opt'][2])
    # done
    # print 'Input:'
    # print string
    writefile('QM.in', string)
    return

# ======================================================================= #


def run_interface(INFOS):
    string = '$SHARC/%s.py QM.in >> QM.log 2> QM.err' % (INFOS['interface_name'])
    print('############## Run section: ##############\nInterface call:')
    print(string)
    error = sp.call(string, shell=True)
    if error == 0:
        print('Finished!')
    else:
        print('*** Something went wrong! ***')
        sys.exit(1)
    return

# ======================================================================= #


def get_output(INFOS):
    path = 'QM.out'
    QMOUT = QMout(path)
    # if INFOS['opt_mode'] == 1:
    #     QMout = read_QMout(path, INFOS['nmstates'], INFOS['natom'], ['h', 'grad', 'nacdr'])
    # else:
    #     QMout = read_QMout(path, INFOS['nmstates'], INFOS['natom'], ['h', 'grad'])
    # pprint.pprint(QMout)
    return QMOUT

# ======================================================================= #
# ======================================================================= #
# ======================================================================= #


def printgrad(a):
    string = ''
    for i, atom in enumerate(a):
        string += '%3i    %16.12f    %16.12f    %16.12f\n' % (i, atom[0], atom[1], atom[2])
    print(string)
# ============================================


def scalarprod(a, b):
    # vectors are lists(n) of lists(3)
    # vector elements are real
    # vectors must be the same length
    if len(a) != len(b):
        print('Cannot calculate scalar product!')
        sys.exit(1)
    s = 0.
    for iatom in range(len(a)):
        for idir in range(3):
            s += a[iatom][idir] * b[iatom][idir]
    return s
# ============================================


def norm(a):
    return scalarprod(a, a)
# ============================================


def normalize(a):
    n = norm(a)
    q = math.sqrt(n)
    for iatom in range(len(a)):
        for idir in range(3):
            a[iatom][idir] /= q
    return a
# ============================================


def GramSchmidt(a, b):
    a = normalize(a)
    b = normalize(b)
    print('Overlap between normalized GD and DC:', scalarprod(a, b))
    ab = scalarprod(a, b)
    c = [[0. for x in y] for y in a]
    for iatom in range(len(a)):
        for idir in range(3):
            c[iatom][idir] = b[iatom][idir] - ab * a[iatom][idir]
    c = normalize(c)
    print('Overlap between orthonormalized GD and DC:', scalarprod(a, c))
    print()
    return a, c
# ============================================


def GradForCI_withNAC(Gl, Gu, Nac, dE):
    # only if Nac!=0
    diff = [[0. for x in y] for y in Gl]
    deri = [[0. for x in y] for y in Gl]
    for iatom in range(len(Gu)):
        for idir in range(3):
            diff[iatom][idir] = Gu[iatom][idir] - Gl[iatom][idir]
            deri[iatom][idir] = -dE * Nac[iatom][idir]

    print('Gradient for lower state')
    printgrad(Gl)
    print('Gradient for upper state')
    printgrad(Gu)
    print('Gradient difference')
    printgrad(diff)
    print('Derivative coupling after scaling')
    printgrad(deri)

    diff, deri = GramSchmidt(diff, deri)
    # f=2*dE*diff
    f = [[0. for x in y] for y in Gl]
    for iatom in range(len(Gu)):
        for idir in range(3):
            f[iatom][idir] = 2. * dE * diff[iatom][idir]

    print('Gradient inside branching plane')
    printgrad(f)

    # g=P(Gu)
    Gu_diff = scalarprod(Gu, diff)
    Gu_deri = scalarprod(Gu, deri)
    g = [[0. for x in y] for y in Gl]
    for iatom in range(len(Gu)):
        for idir in range(3):
            g[iatom][idir] = Gu[iatom][idir] - Gu_diff * diff[iatom][idir] - Gu_deri * deri[iatom][idir]

    print('Gradient inside intersection space')
    printgrad(g)

    # get final gradient
    for iatom in range(len(Gu)):
        for idir in range(3):
            g[iatom][idir] += f[iatom][idir]

    # print 'Final gradient for step'
    # printgrad(g)

    return g
# ============================================


def GradForMXP_noNAC(Gl, Gu, dE):
    diff = [[0. for x in y] for y in Gl]
    for iatom in range(len(Gu)):
        for idir in range(3):
            diff[iatom][idir] = Gu[iatom][idir] - Gl[iatom][idir]

    print('Gradient for lower state')
    printgrad(Gl)
    print('Gradient for upper state')
    printgrad(Gu)
    print('Gradient difference')
    printgrad(diff)

    diff = normalize(diff)
    # f=2*dE*diff
    f = [[0. for x in y] for y in Gl]
    for iatom in range(len(Gu)):
        for idir in range(3):
            f[iatom][idir] = 2. * dE * diff[iatom][idir]

    print('Gradient inside branching plane')
    printgrad(f)

    # g=P(Gu)
    Gu_diff = scalarprod(Gu, diff)
    g = [[0. for x in y] for y in Gl]
    for iatom in range(len(Gu)):
        for idir in range(3):
            g[iatom][idir] = Gu[iatom][idir] - Gu_diff * diff[iatom][idir]

    print('Gradient inside intersection space')
    printgrad(g)

    # get final gradient
    for iatom in range(len(Gu)):
        for idir in range(3):
            g[iatom][idir] += f[iatom][idir]

    # print 'Final gradient for step'
    # printgrad(g)

    return g
# ============================================


def EForCI_noNAC(El, Eu, sigma, alpha):
    return (Eu + El) / 2. + sigma * (Eu - El)**2 / (Eu - El + alpha)
# ============================================


def GradForCI_noNAC(Gl, Gu, El, Eu, sigma, alpha):

    print('Gradient for lower state')
    printgrad(Gl)
    print('Gradient for upper state')
    printgrad(Gu)

    diff = [[0. for x in y] for y in Gl]
    summ = [[0. for x in y] for y in Gl]
    for iatom in range(len(Gu)):
        for idir in range(3):
            diff[iatom][idir] = Gu[iatom][idir] - Gl[iatom][idir]
            summ[iatom][idir] = (Gu[iatom][idir] + Gl[iatom][idir]) / 2.

    print('Gradient difference')
    printgrad(diff)
    print('Gradient average')
    printgrad(summ)

    g = [[0. for x in y] for y in Gl]
    k = (Eu - El) / (Eu - El + alpha)
    k = k - 0.5 * k**2
    for iatom in range(len(Gu)):
        for idir in range(3):
            g[iatom][idir] = summ[iatom][idir] + 2. * sigma * k * diff[iatom][idir]

    # print 'Final gradient for step'
    # printgrad(g)

    return g


# ======================================================================= #
def write_to_orca(INFOS, QMout, path):
    print('############ Gradient section: ###########\nAll data in a.u.\nEnergies:')
    for i, line in enumerate(QMout['h']):
        print('    %16.12f %s' % (line[i].real, ['', '*'][i + 1 in INFOS['opt']]))
    print()
    # get E and g
    if INFOS['opt_mode'] == 0:
        state = INFOS['opt'][1] - 1
        E = QMout['h'][state][state].real
        g = QMout['grad'][state]
        print('>>>', E)
    elif INFOS['opt_mode'] == 1:
        state1 = INFOS['opt'][1] - 1
        state2 = INFOS['opt'][2] - 1
        El = QMout['h'][state1][state1].real
        Eu = QMout['h'][state2][state2].real
        Gl = QMout['grad'][state1]
        Gu = QMout['grad'][state2]
        Nac = QMout['nacdr'][state1][state2]
        E = Eu
        g = GradForCI_withNAC(Gl, Gu, Nac, Eu - El)
        print('>>>', El, Eu)
        print('Energy gap: %16.12f' % (Eu - El))
    elif INFOS['opt_mode'] == 2:
        state1 = INFOS['opt'][1] - 1
        state2 = INFOS['opt'][2] - 1
        El = QMout['h'][state1][state1].real
        Eu = QMout['h'][state2][state2].real
        Gl = QMout['grad'][state1]
        Gu = QMout['grad'][state2]
        E = EForCI_noNAC(El, Eu, INFOS['sigma'], INFOS['alpha'])
        g = GradForCI_noNAC(Gl, Gu, El, Eu, INFOS['sigma'], INFOS['alpha'])
        print('>>>', El, Eu)
        print('Energy gap: %16.12f' % (Eu - El))
    elif INFOS['opt_mode'] == 3:
        state1 = INFOS['opt'][1] - 1
        state2 = INFOS['opt'][2] - 1
        El = QMout['h'][state1][state1].real
        Eu = QMout['h'][state2][state2].real
        Gl = QMout['grad'][state1]
        Gu = QMout['grad'][state2]
        E = Eu
        g = GradForMXP_noNAC(Gl, Gu, Eu - El)
        print('>>>', El, Eu)
        print('Energy gap: %16.12f' % (Eu - El))

    print('Energy to optimize: %16.12f' % (E))
    print('Gradient to follow:')
    printgrad(g)

    string = '#\n# Number of atoms\n#\n%i\n#\n# The current total energy in Eh\n#\n%20.12e\n#\n# The current gradient in Eh/bohr\n#\n' % (INFOS['natom'],E)
    for atom in g:
      for d in atom:
        string += '%20.12e\n' % (d)
    print('Writing to %s' % (path))
    writefile(path, string)


# ============================================
if __name__ == "__main__":
    setup_print() 
    try:
        script, ext_in = sys.argv
        jobname = ext_in.split('.')[0]
        ext_out = jobname+'.engrad'
        if os.path.isfile(ext_out):
            os.remove(ext_out)  # remove so if anything goes wrong, ORCA will not continue
        print("")
        print("         *************************************************************")
        print("         *                    EXTERNAL SHARC JOB                     *")
        print("         *************************************************************")
        print("")
        INFOS = read_infos(ext_in)
        INFOS = prepare_savedir(INFOS)
        write_QMin(INFOS)
        run_interface(INFOS)
        QMout = get_output(INFOS)
        write_to_orca(INFOS, QMout, ext_out)
        print("")
        print("         *************************************************************")
        print("         *                  EXTERNAL SHARC JOB DONE                   *")
        print("         *************************************************************")
        print("")
    finally:
        cleanup_print() 


