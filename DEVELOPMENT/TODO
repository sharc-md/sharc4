

Fortran code:
- Laser field (Granucci paper, Thachuk paper): radiative/nonradiative hops
- other decoherence schemes (see, e.g., Prezhdo JPCL review)
- adjust_phases from largest element, not from diagonal


Makefile:
- output.f90 needs to be compiled every time, so that the build info is always up-to-date


Tutorial:
- mark background infos
- state that the example figures could also look different (different compilers, etc)
- switch the tutorial to MOLCAS


Manual:
- diagnostics.py                DONE
- elaborate more on analysis    DONE (partially)
- essdyn and nma                DONE
- ADF interface
- MOLPRO interface              DONE


Others:
- script for extracting random geometries from trajectories (from/to timestep, which trajectories, ...)
- script for setting up scattering initial conditions (merge two initconds files with Wigner distributions, setting translational and rotational shift and relative translational and rotational velocities)


Diagnostics tool:
- Check trajectories for 
    * total energy conversion (changes per time step, and overall changes), 
    * discontinuities in the potential energies/kinetic energy, 
    * crashes/normal termination, 
    * missing files (output, is it restartable?), 
    * total population (should not be necessary with our propagators),
    * intruder states
    * TODO: also unreasonable hops?
- find maximum usable time for each trajectory



Python:
- question(): add comma-separated lists
- class for understanding ranges:
  for example:
        s = "2,5,7-9,12"
        ranges = (x.split("-") for x in s.split(","))
        print [i for r in ranges for i in range(int(r[0]), int(r[-1]) + 1)]
- delete all with statements






COLUMBUS interface:
- parallel jobs



MOLCAS interface:
- state-averaging with zero weight extra states
- cleanup keyword
- readcienergy from RASSI output
- RASSCF capabilities (i.e., RAS1, RAS2, RAS3)



diagnostics.py:
- explanation of settings (help dialog) DONE



Setup:
- on the fly Dyson norms
- excite.py: initial state different from S0


Analysis:
- TR spectra generation from trajectory data
- TR spectra from a posteriori calculations



Test suite:
- adjust to new MOLCAS interface
- adjust to new MOLPRO interface
- RICC2, ADF, check COLUMBUS




Introduce wfoverlaps to suite
- make $SHARC/wfoverlap.x the default path in setup scripts/interfaces


trajana_*.py:
- merge the two scripts
- redesign the time interval setup



Interfaces:
- choose alpha and beta spins cleverly for efficient Dyson calculations
- ALL interfaces should write to savedir some info about the status of the files (i.e., to which time step the new and old files correspond! Otherwise, the interface cannot know whether it should moveToOld at restarts.