# kate: replace-tabs FALSE; indent-width 8;
F90 = gfortran
LDFLAGS      = -L/user/mai/qd_package/lib/ -L/usr/lib64/

# WARNFLAGS and DEBUGFLAGS for GFORTRAN
WARNFLAGS    = -Wall -Wextra -Winline -Wno-unused-parameter -Wimplicit-interface
DEBUGFLAGS   = -fbounds-check -fimplicit-none -fbacktrace -g 

# works for GFORTRAN and IFORT
OPTFLAGS     = -O0 -funroll-loops
MODFLAGS     = -fsyntax-only

# SHELL necessary?
SHELL = /bin/bash

# will be included in sharc source code so that compiler, host, etc. can be printed at runtime
DATE  = $(shell date)
HOST  = $(shell hostname)
COMPILEDIR = $(shell pwd)
COMPILER   = $(shell which ${F90})

# where the binaries should be put
EXEDIR     = ../bin
# maybe would be good if the makefile tells the user to set $SHARC environment variable
# or have a set_sharcpaths.sh or something

# sources for sharc.x, data_extractor.x and diagonalizer.x
SRC_F90  = definitions.f90 \
           electronic.f90 \
           input.f90 \
           input_list.f90 \
           electronic_laser.f90 \
           main.f90 \
           matrix.f90 \
           misc.f90 \
           nuclear.f90 \
           output.f90 \
           qm.f90 \
           qm_out.f90 \
           restart.f90 \
           string.f90

MODS_F90    = $(patsubst %.f90,%.mod,$(SRC_F90))






all: sharc data_extractor diagonalizer laser

sharc: $(SRC_F90) $(MODS_F90)
	$(F90) -llapack -lblas $(LDFLAGS) $(OPTFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) $(SRC_F90) -o  $(EXEDIR)/sharc.x

data_extractor: definitions.mod matrix.mod
	$(F90) -llapack -lblas $(LDFLAGS) $(OPTFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) definitions.f90 matrix.f90 data_extractor.f90 -o $(EXEDIR)/data_extractor.x

diagonalizer: matrix.mod string.mod
	$(F90) -llapack -lblas $(LDFLAGS) $(OPTFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) string.f90 matrix.f90 diagonalizer.f90 -o $(EXEDIR)/diagonalizer.x

laser: laser_gfortran

laser_: LASER_main.mod LASER_definitions.mod LASER_input.mod LASER_calc.mod
	$(F90) $(LDFLAGS) $(OPTFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) $(SRC_LASER) LASER_main.f90 LASER_definitions.f90 LASER_input.f90 -o $(EXEDIR)/laser.x

clean:
	rm -rvf *.mod
	rm -rvf build_info.inc
	rm -rvf $(EXEDIR)/sharc.x $(EXEDIR)/data_extractor.x $(EXEDIR)/diagonalizer.x $(EXEDIR)/laser.x

intel: F90           = ifort
intel: COMPILER      = $(shell which ${F90})
intel: WARNFLAGS     = -warn all,interfaces -stand f90 -implicitnone
intel: DEBUGFLAGS    = -check all,noarg_temp_created,bounds -traceback -fstack-protector -g
intel: all laser_intel

gfortran: F90        = gfortran
gfortran: COMPILER   = $(shell which ${F90})
gfortran: WARNFLAGS  = -Wall -Wextra -Winline -Wno-unused-parameter -Wimplicit-interface
gfortran: DEBUGFLAGS = -fbounds-check -fimplicit-none -fbacktrace -g 
gfortran: all laser_gfortran

intel_fftw: F90           = ifort
intel_fftw: COMPILER      = $(shell which ${F90})
intel_fftw: WARNFLAGS     = -warn all,interfaces -stand f90 -implicitnone
intel_fftw: DEBUGFLAGS    = -check all,noarg_temp_created,bounds -traceback -fstack-protector -g
intel_fftw: all laser_intel_fftw

gfortran_fftw: F90        = gfortran
gfortran_fftw: COMPILER   = $(shell which ${F90})
gfortran_fftw: WARNFLAGS  = -Wall -Wextra -Winline -Wno-unused-parameter -Wimplicit-interface
gfortran_fftw: DEBUGFLAGS = -fbounds-check -fimplicit-none -fbacktrace -g 
gfortran_fftw: all laser_gfortran_fftw

laser_intel_fftw: SRC_LASER=LASER_calc_fftw.f90
laser_intel_fftw: LDFLAGS+= -lfftw3 
laser_intel_fftw: F90=ifort
laser_intel_fftw: WARNFLAGS     = -warn all,interfaces -stand f90 -implicitnone
laser_intel_fftw: DEBUGFLAGS    = -check all,noarg_temp_created,bounds -traceback -fstack-protector -g
laser_intel_fftw: laser_

laser_intel:SRC_LASER=LASER_calc_nofftw.f90
laser_intel: F90=ifort
laser_intel: WARNFLAGS     = -warn all,interfaces -stand f90 -implicitnone
laser_intel: DEBUGFLAGS    = -check all,noarg_temp_created,bounds -traceback -fstack-protector -g
laser_intel: laser_

laser_gfortran_fftw: SRC_LASER=LASER_calc_fftw.f90
laser_gfortran_fftw: LDFLAGS+= -lfftw3
laser_gfortran_fftw: F90=gfortran
laser_gfortran_fftw: laser_

laser_gfortran:SRC_LASER=LASER_calc_nofftw.f90
laser_gfortran: F90=gfortran
laser_gfortran: laser_






definitions.mod: definitions.f90
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) definitions.f90

electronic.mod: electronic.f90                          definitions.mod matrix.mod nuclear.mod
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) electronic.f90

input.mod: input.f90                                    definitions.mod input_list.mod misc.mod output.mod restart.mod string.mod
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) input.f90

input_list.mod: input_list.f90
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) input_list.f90

electronic_laser.mod: electronic_laser.f90                                    definitions.mod electronic.mod matrix.mod 
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) electronic_laser.f90

matrix.mod: matrix.f90
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) matrix.f90

# main.mod will not be created, but main.f90 should still be syntax-checked...
main.mod: main.f90                                      definitions.mod electronic.mod electronic_laser.mod input.mod matrix.mod misc.mod nuclear.mod qm.mod restart.mod output.mod
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) main.f90

misc.mod: misc.f90                                      definitions.mod
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) misc.f90

nuclear.mod: nuclear.f90                                definitions.mod matrix.mod
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) nuclear.f90

output.mod: output.f90                                  definitions.mod matrix.mod build_info.mod
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) output.f90

qm.mod: qm.f90                                          definitions.mod electronic.mod matrix.mod qm_out.mod output.mod
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) qm.f90

qm_out.mod: qm_out.f90                                  matrix.mod
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) qm_out.f90

restart.mod: restart.f90                                definitions.mod matrix.mod
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) restart.f90

string.mod: string.f90
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) string.f90

LASER_main.mod: LASER_main.f90 LASER_definitions.mod LASER_input.mod LASER_calc.mod
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) LASER_main.f90

LASER_definitions.mod: LASER_definitions.f90
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) LASER_definitions.f90

LASER_input.mod: LASER_input.f90 LASER_definitions.mod
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) LASER_input.f90

LASER_calc.mod: $(SRC_LASER) LASER_definitions.mod
	$(F90) $(MODFLAGS) $(WARNFLAGS) $(DEBUGFLAGS) $(SRC_LASER)

# build_info.mod is never created, so the following is always executed
build_info.mod: 
	@echo "Updating \"build_info.inc\""
	@echo "character*8000, parameter :: build_date=\"$(DATE)\"" > build_info.inc
	@echo "character*8000, parameter :: build_host=\"$(HOST)\"" >> build_info.inc
	@echo "character*8000, parameter :: build_dir=\"$(COMPILEDIR)\"" >> build_info.inc
	@echo "character*8000, parameter :: build_compiler=\"$(COMPILER)\"" >> build_info.inc
